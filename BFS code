#include <iostream>
#include <vector>
#include <queue>
#define WHITE 0
#define GRAY 1
#define BLACK 2
#define INF INT_MAX
#define NIL -1

// Breadth-First Search
void BFS(Graph& G, int s) {

    // Initialization of all vertices in Graph G
    std::vector<int> color(G.V, WHITE); // color: undiscovered (WHITE)
    std::vector<int> d(G.V, INF); // distance from start vertex (s): infinity (INF)
    std::vector<int> pi(G.V, NIL); // predecessor|parent in BFS tree: none (NIL)

    // Discover start vertex (s)
    // Initialization of start vertex properties
    color[s] = GRAY; // color: discovered, search in progress (GRAY)
    d[s] = 0; // distance from the start vertex (s) to itself: always 0
    pi[s] = NIL; // start vertex does not have a predecessor in BFS tree

    // Queue to manage the order of BFS vertex exploration: FIFO
    // keep track of vertices that have been discovered but not fully processed (GRAY)
    std::queue<int> Q;
    
    Q.push(s); // enqueue start vertex (s)

    // Process queue until it becomes empty
    while (!Q.empty()) {

        int u = Q.front(); // next vertex to be processed (u)
        Q.pop(); // dequeue frontmost vertex (u): FIFO

        // Explore each adjacent vertex of u
        for (int v : G.adj[u]) {
            // adj vertex (v) is undiscovered (WHITE) -> discover vertex (v)
            if (color[v] == WHITE) {
                // property update
                color[v] = GRAY; // color: discovered, search in progress (GRAY)
                d[v] = d[u] + 1; // distance of v: distance of u + 1
                pi[v] = u; // predecessor|parent of v: u
                Q.push(v); // enqueue vertex (v) to be processed: v on frontier
            }
        }
        // After exploring all neighbors of vertex u
        color[u] = BLACK; // color: discovered, search fully finished (BLACK)
    }
}
